# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow builds a Java project with Maven, runs tests, builds a Docker image, and pushes it to Docker Hub.
name: Java CI with Maven and Docker

on:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']

permissions:
  contents: write

env:
  START_VERSION: "1.3.9"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code with full history and tags
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history
          tags: true      # Fetch all tags

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Get and increment version
      - name: Get and increment version
        id: increment_version
        shell: bash
        env:
          START_VERSION: ${{ env.START_VERSION }}
        run: |
          # Extract major and minor from START_VERSION (e.g., 1.3)
          MAJOR_MINOR="${START_VERSION%.*}"
          echo "Major.Minor version: $MAJOR_MINOR"

          # Get the latest tag matching v1.3.*
          LATEST_TAG=$(git tag --list "v${MAJOR_MINOR}.*" --sort=-v:refname | head -n1)
          echo "Latest tag: $LATEST_TAG"

          # If no tags are found, start from START_VERSION
          if [ -z "$LATEST_TAG" ]; then
            NEW_VERSION="$START_VERSION"
          else
            # Remove 'v' prefix if present
            VERSION=${LATEST_TAG#v}
            echo "Current version: $VERSION"

            # Split the version into components
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

            # Increment the PATCH version
            PATCH=$((PATCH + 1))

            # Construct the new version
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "New version: $NEW_VERSION"

          # Output the new version for later steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # Step 4: Build and test with Maven
      - name: Build and test with Maven
        run: mvn clean test

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 6: Build and push Docker image
      - name: Build and push Docker image
        run: |
          # Build Docker image with the new version tag
          docker build \
            -t stykle/brevo:${{ steps.increment_version.outputs.new_version }} \
            -f ./Dockerfile .

          # Push the Docker image to Docker Hub
          docker push stykle/brevo:${{ steps.increment_version.outputs.new_version }}

          # Tag the image as 'latest' and push
          docker tag \
            stykle/brevo:${{ steps.increment_version.outputs.new_version }} \
            stykle/brevo:latest

          docker push stykle/brevo:latest

      # Step 7: Create and push the new Git tag
      - name: Create and push Git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG="v${{ steps.increment_version.outputs.new_version }}"
          echo "Creating and pushing tag: $NEW_TAG"

          # Configure Git to use the GITHUB_TOKEN
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Update the remote URL to include the GITHUB_TOKEN
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}

          # Create the new tag
          git tag "$NEW_TAG"

          # Push the new tag
          git push origin "$NEW_TAG"

